# -*- coding: utf-8 -*-
"""dibyendusir.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1G7TQTgovjsX56Eo3jgFIoR5Ly5gh47

>college work

make model for anomamies detection from dron captured images
"""

import os
from PIL import Image
import matplotlib.pyplot as plt
import cv2
import numpy as np

folder_path = r'C:\Users\vishal\Downloads\Images'

file_names = os.listdir(folder_path)

image_files = [f for f in file_names]

for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    img = Image.open(image_path)
    plt.imshow(img)
    plt.axis('off')
    plt.show()
#open and show data

images = []
for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    img = cv2.imread(image_path)
    images.append(img)
#creat path(constructing path to combining the folder path with the individual image file name)

gray_images = []
thresh_images = []
for img in images:
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray_images.append(gray)
    _, thresh = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY_INV)
    thresh_images.append(thresh)
    plt.imshow(thresh, cmap='gray')
    plt.axis('off')
    plt.show()
# converting to grayscale, and then grayscal to binary(b/w)

contours = []
for thresh in thresh_images:
    contours_img, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contours.append(contours_img)
#finding contour in images
for i, img in enumerate(images):
    img_with_contours = img.copy()
    cv2.drawContours(img_with_contours, contours[i], -1, (0, 255, 0), 2)          #draw or owerlap contours on original image

    plt.imshow(cv2.cvtColor(img_with_contours, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title('Image with Contours')
    plt.show()

# new trial

images = []
gray_images = []
bw_images = []

for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    print(f"Processing image: {image_path}")                # Print image path for debugging

    img = cv2.imread(image_path)

    images.append(img)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)          #original images, grayscale images, and binary images, respectively.
    gray_images.append(gray)

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)                        #highlights the reddish parts using the HSV color space.

    lower_red = np.array([0, 50, 50])                       #red color range in HSV.
    upper_red = np.array([10, 255, 255])

    mask = cv2.inRange(hsv, lower_red, upper_red)

    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

    bw_image = cv2.bitwise_and(gray, gray, mask=mask)
    bw_images.append(bw_image)

    # Display the black and white image
    plt.imshow(bw_image, cmap='gray')
    plt.axis('off')
    plt.title('Reddish Parts')
    plt.show()

# Find contours in the black and white images
contours = []
for bw_image in bw_images:
    contours_img, _ = cv2.findContours(bw_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    contours.append(contours_img)

# Draw bounding boxes on original images
for i, img in enumerate(images):
    img_with_boxes = img.copy()

    for contour in contours[i]:
        x, y, w, h = cv2.boundingRect(contour)
        cv2.rectangle(img_with_boxes, (x, y), (x + w, y + h), (0, 0, 0), 2)  # Draw in black color (0, 0, 0)

    # Display the image with bounding boxes
    plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title('Image with Bounding Boxes with Dark Boundaries')
    plt.show()

# Load and process images
images = []
gray_images = []
bw_images_yellow = []

for image_file in image_files:
    image_path = os.path.join(folder_path, image_file)
    print(f"Processing image: {image_path}")                 # Print image path for debugging

    img = cv2.imread(image_path)

    images.append(img)

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray_images.append(gray)

    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

    lower_yellow = np.array([20, 100, 100])                  #range of yellow color in HSV
    upper_yellow = np.array([30, 255, 255])

    mask_yellow = cv2.inRange(hsv, lower_yellow, upper_yellow)

    kernel = np.ones((5, 5), np.uint8)
    mask_yellow = cv2.morphologyEx(mask_yellow, cv2.MORPH_CLOSE, kernel)

    bw_image_yellow = cv2.bitwise_and(gray, gray, mask=mask_yellow)
    bw_images_yellow.append(bw_image_yellow)

contours_yellow = []
for bw_image_yellow in bw_images_yellow:
    contours_img, _ = cv2.findContours(bw_image_yellow, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)  #contours black and white images (yellow parts)
    contours_yellow.append(contours_img)

for i, img in enumerate(images):                   #D box yellow parts in green color
    img_with_boxes = img.copy()

    for contour in contours_yellow[i]:
        x, y, w, h = cv2.boundingRect(contour)
        cv2.rectangle(img_with_boxes, (x, y), (x + w, y + h), (0, 255, 0), 2)         # Draw in green color (BGR format)

        save_path = os.path.join(save_folder, f'image_{i+1}_with_boxes.png')
        cv2.imwrite(save_path, img_with_boxes)

    plt.imshow(cv2.cvtColor(img_with_boxes, cv2.COLOR_BGR2RGB))
    plt.axis('off')
    plt.title(f'Image {i+1} with Bounding Boxes on Yellow Parts (Green)')
    plt.show()


save_folder = r'C:\Users\vishal\Downloads\Images\123'
os.makedirs(save_folder, exist_ok=True)
print(f'saved in folder.')













